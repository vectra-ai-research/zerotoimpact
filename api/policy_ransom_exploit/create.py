import os
from lib.instance_repo import add_to_disk
from lib.iam_operations import create_client_profile, create_user, create_access_key, get_profile_account_id
import json
import lib.sanitize

class Create:
    def __init__(self, id, profile, region, pathToDisk):
        self.id = id
        self.profile = profile 
        self.region = region
        self.status = None
        self.step = 0
        self.logs =  []
        self.exchange = []
        self.resources = {
            'users': [],
            'accounts':[],
            'policies': [],
            'buckets': [],
            "iam_credentials": [] }
       
        self.filename = os.path.abspath(f"{pathToDisk}/{self.id}.json")

    def create(self):
        self.status = "create_started"
        try:
            self.step = 1
            account_id = get_profile_account_id(self.profile)
            self.resources['accounts'].append(account_id)
            self._create_user_and_attach_polices()
            self._add_to_disk()
            
            self.step = 2
            self._create_bucket_and_put_files()
            self.status = "create_complete"
            self._add_to_disk()
        except Exception as e:
            self.status = 'create_failed'
            self.logs.append(f"Create failed: {e}")
            print(f"Create failed: {e}")
            self._add_to_disk()
       
    def _create_bucket_and_put_files(self):
        bucket_name = f"zti-bucket-to-ransomware-{self.id}"
        bucket_name = lib.sanitize.sanitize_bucket_name(bucket_name)
        client = create_client_profile('s3', self.region, self.profile)
        
        response = client.create_bucket(Bucket=bucket_name)
        self.exchange.append({"operation" : "create s3 bucket", "response": response})
        self.resources['buckets'].append(bucket_name)
        self.logs.append(f"Bucket {bucket_name} created successfully.")
        
        for i in range(1, 11):
            file_name = f'file_{i}.txt'
            response = client.put_object(Bucket=bucket_name, Key=file_name, Body=f"This is the content of file {i}.")
            self.exchange.append({"operation" : f"Uploaded {file_name}", "response": response})
         
    def _create_user_and_attach_polices(self):
        user_name = f"john@zti.com-{self.id}"
        client = create_client_profile('iam',self.region, self.profile)
        create_user(client, user_name, self.exchange, self.logs, self.resources)
        create_access_key(client, user_name, self.exchange, self.logs, self.resources)
        
        policy_versions = [ {   
                "Version": "2012-10-17",
                "Statement": [{
                    "Sid": "Version1",
                    "Action": ["iam:Get*", "iam:List*"],
                    "Effect": "Allow",
                    "Resource": "*"
                }]}, {
                "Version": "2012-10-17",
                "Statement": [{
                    "Sid": "Version2",
                    "Action": "*",
                    "Effect": "Allow",
                    "Resource": "*"
                }]},{
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "Version3",
                        "Action": [
                            "s3:ListBucket",
                            "s3:GetObject",
                            "s3:ListAllMyBuckets"
                        ],
                        "Effect": "Allow",   
                        "Resource": "*"
                    }
                ]
                    }, {
                    "Version": "2012-10-17",
                    "Statement": [ {
                        "Sid": "IAMPrivilegeEscalationByRollback",
                        "Action": [
                        "iam:Get*",
                        "iam:List*",
                        "iam:SetDefaultPolicyVersion"
                        ],
                        "Effect": "Allow",
                        "Resource": "*" } ] } ]

        custom_policy_name = f"{user_name}-custom_policy"
        initial_policy_doc = json.dumps(policy_versions[0])
        response = client.create_policy(
            PolicyName=custom_policy_name,
            PolicyDocument=initial_policy_doc
        )
        policy_arn = response['Policy']['Arn']
        self.exchange.append({"operation": "create custom policy", "response": response})
        self.resources['policies'].append(policy_arn)

        for policy_doc in policy_versions[1:]:
            client.create_policy_version(
                PolicyArn=policy_arn,
                PolicyDocument=json.dumps(policy_doc),
                SetAsDefault=True
            )
        
        policy_arn = response['Policy']['Arn']
        response = client.attach_user_policy(
            UserName=user_name,
            PolicyArn=policy_arn
        )
        self.exchange.append({"operation" : "attach custom policy to user", "response": response})
        self.logs.append(f"Policies attached to {user_name} successfully.")
      
    def _add_to_disk(self):
        add_to_disk(self.filename, self.id, self.status, self.step, self.exchange, self.logs, self.resources)

 
