from lib.iam_operations import create_client_profile
from lib.instance_repo import add_to_disk
import os
class Destroy:
    def __init__(self, id, profile, aws_region, instance, pathToDisk):
        self.id = id
        self.logs =  []
        self.instance = instance
        self.resources = instance['resources']
        self.profile = profile
        self.region = aws_region
        self.step = 0
        self.filename = os.path.abspath(f"{pathToDisk}/{self.id}.json")

    def destroy(self):
        self.status = 'destroy_started'
        try:
            client = create_client_profile('s3',self.region, self.profile)

            for bucket_name in self.resources['buckets']:
                bucket_objects = client.list_objects(Bucket=bucket_name).get('Contents', [])
                for obj in bucket_objects:
                    client.delete_object(Bucket=bucket_name, Key=obj['Key'])
                client.delete_bucket(Bucket=bucket_name)
                self.logs.append(f"Deleted bucket {bucket_name} successfully")
            self._add_to_disk()

            client = create_client_profile('iam',self.region, self.profile)

            for user_name in self.resources['users']:
                managed_policies = client.list_attached_user_policies(UserName=user_name)['AttachedPolicies']
                for policy in managed_policies:
                    client.detach_user_policy(UserName=user_name, PolicyArn=policy['PolicyArn'])

                inline_policies = client.list_user_policies(UserName=user_name)['PolicyNames']
                for policy_name in inline_policies:
                    client.delete_user_policy(UserName=user_name, PolicyName=policy_name)


                access_keys = client.list_access_keys(UserName=user_name)['AccessKeyMetadata']
                for key in access_keys:
                    client.delete_access_key(UserName=user_name, AccessKeyId=key['AccessKeyId'])

                client.delete_user(UserName=user_name)
                self.logs.append(f"Deleted IAM user {user_name} successfully")
            self._add_to_disk()
            
            for policy_arn in self.resources['policies']:
                policy_versions = client.list_policy_versions(PolicyArn=policy_arn)
                
                for version in policy_versions['Versions']:
                    if not version['IsDefaultVersion']:
                        client.delete_policy_version(PolicyArn=policy_arn, VersionId=version['VersionId'])
                
                try:
                    client.delete_policy(PolicyArn=policy_arn)
                except Exception as e:
                    self.logs.append(f"Error deleting policy {policy_arn}: {e}")

            self.logs.append(f"Deleted IAM policies successfully")

            self.status = 'destroy_complete'
            self._add_to_disk()
        except Exception as e:
            self.status = 'destroy_failed'
            self.logs.append(f"Error destroy process failed: {e}")
            self._add_to_disk() 
    
    def _add_to_disk(self):
        add_to_disk(self.filename, self.id, self.status, self.step, self.instance["exchange"],self.instance["logs"],self.instance["resources"])